// general
.controls_window_container{
  width: 98%;
  padding: 25px 10px 10px 10px;
}


.typeofrequest{width: 32%;
  display: inline-block;
  text-align: center;
  margin:0;}
.mediumdiv{text-align: center;}
.mediumdivcontainer{display: table; margin: 0 auto;}
.medium{text-align: left; display:table;}
.submit-section{text-align: center;}
.submit-section input{height: 60px;
                width: 150px;
                font-size: 22px;}
.requesttypediv hr{
  margin: 10px 0;
  }
// checkbox
/* Made by Jimmy Gillam */
$checked-color: 	#484848;
$unchecked-color: #C0C0C0;
$checkbox-height: 60px;
$background-color: white;
$font-color:#efefef;
$duration: .4s;

 /* Checkmark style starts */

@-moz-keyframes dothabottomcheck{
    0% { height: 0; }
    100% { height: $checkbox-height/2; }
}

@-webkit-keyframes dothabottomcheck{
    0% { height: 0; }
    100% { height: $checkbox-height/2; }
}

@keyframes dothabottomcheck{
    0% { height: 0; }
    100% { height: $checkbox-height/2;  }
}

@keyframes dothatopcheck{
    0% { height: 0; }
    50% { height: 0; }
    100% { height: $checkbox-height * 1.2; }
}
@-webkit-keyframes dothatopcheck{
    0% { height: 0; }
    50% { height: 0; }
    100% { height: $checkbox-height * 1.2; }
}
@-moz-keyframes dothatopcheck{
    0% { height: 0; }
    50% { height: 0; }
    100% { height: $checkbox-height * 1.2; }
}

input[type=checkbox]{
    display:none;
}

.check-box {
    height: $checkbox-height;
    width: $checkbox-height;
    background-color: transparent;
    border: $checkbox-height * .1 solid $unchecked-color;
    border-radius: 5px;
    position: relative;
    display: inline-block;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
    -moz-transition: border-color ease $duration/2;
    -o-transition: border-color ease $duration/2;
    -webkit-transition: border-color ease $duration/2;
    transition: border-color ease $duration/2;
    cursor:pointer;

    &::before, &::after {
        -moz-box-sizing: border-box;
        -webkit-box-sizing: border-box;
        box-sizing: border-box;
        position: absolute;
        height: 0;
        width: $checkbox-height * .2;
        background-color: $checked-color;
        display: inline-block;
        -moz-transform-origin: left top;
        -ms-transform-origin: left top;
        -o-transform-origin: left top;
        -webkit-transform-origin: left top;
        transform-origin: left top;
        border-radius: 5px;
        content: ' ';
        -webkit-transition: opacity ease .5;
        -moz-transition: opacity ease .5;
        transition: opacity ease .5;
    }

    &::before {
        top:$checkbox-height * .72;
        left: $checkbox-height * .41;
        box-shadow: 0 0 0 $checkbox-height * .05 $background-color;
        -moz-transform: rotate(-135deg);
        -ms-transform: rotate(-135deg);
        -o-transform: rotate(-135deg);
        -webkit-transform: rotate(-135deg);
        transform: rotate(-135deg);
    }

    &::after {
        top: $checkbox-height * .37;
        left: $checkbox-height * .05;
        -moz-transform: rotate(-45deg);
        -ms-transform: rotate(-45deg);
        -o-transform: rotate(-45deg);
        -webkit-transform: rotate(-45deg);
        transform: rotate(-45deg);
    }
}

input[type=checkbox]:checked + .check-box,
.check-box.checked{
    border-color:$checked-color;

    &::after{
        height: $checkbox-height * .5;
        -moz-animation: dothabottomcheck $duration/2 ease 0s forwards;
        -o-animation: dothabottomcheck $duration/2 ease 0s forwards;
        -webkit-animation: dothabottomcheck $duration/2 ease 0s forwards;
        animation: dothabottomcheck $duration/2 ease 0s forwards;
    }

    &::before{
        height: $checkbox-height * 1.2;
        -moz-animation: dothatopcheck $duration ease 0s forwards;
        -o-animation: dothatopcheck $duration ease 0s forwards;
        -webkit-animation: dothatopcheck $duration ease 0s forwards;
        animation: dothatopcheck $duration ease 0s forwards;
    }
}

$fade_time: .5s;
// submit message
.submit_thanks{
    font-size: 25px;
    color: #449d44;
    margin-top: 25px;
    text-align: center;
    animation: fadein $fade_time;
    -moz-animation: fadein $fade_time; /* Firefox */
    -webkit-animation: fadein $fade_time; /* Safari and Chrome */
    -o-animation: fadein $fade_time; /* Opera */
}
@keyframes fadein {
    from {opacity:0;}
    to {opacity:1;}
}
@-moz-keyframes fadein { /* Firefox */
  from {opacity:0;}
  to {opacity:1;}
}
@-webkit-keyframes fadein { /* Safari and Chrome */
  from {opacity:0;}
  to {opacity:1;}
}
@-o-keyframes fadein { /* Opera */
  from {opacity:0;}
  to {opacity:1;}
}









// FIREWORKS!

@function posOrNeg(){
  @return random() * 2 - 1;
}

$fwSize: 20;
$totalFireworks: 5;
$totalPieces: 20;
$time:2;

// html, body {
//   height: 100%;
// }
//
body {
  // background: black;
  overflow: hidden;
}

.wrap {
  height: 100%;
  transform-style: preserve-3d;
  position: relative;
}

.firework {
  position: absolute;
  top: 200px;
  left: 50%;
  backface-visibilty: hidden;
}

.c {
  background: blue;
  height: $fwSize+px;
  width: $fwSize+px;
  position: absolute;
  border-radius: 50%;
}

@for $i from 1 through $totalFireworks {
  $x: random(300) * posOrNeg()+px;
  $y: -(random(30) + 60)+vh;

  @keyframes shoot#{$i}{
    0% {
      transform: translate3d(0,0,0) scale(.1);
    }
    95% {
      opacity: 1;
    }
    100% {
      transform: translate3d($x, $y, 0) scale(1);
      opacity: 0;
    }
  }
  .firework:nth-child(#{$i}){
    animation: shoot#{$i} $time+s;
    animation-delay: ($time/$totalFireworks * $i)+s;
  }

  @for $x from 1 through $totalPieces {
    .firework:nth-child(#{$i}) .c {
      $hue: (360/$totalFireworks) * $i;
      background: hsl($hue, 100%, 50%);
      box-shadow: 0 0 3px 0px hsla($hue, 100%, 50%, .8);
      &:nth-child(#{$x}){
      animation-delay: ($time/$totalFireworks * $i)+s;
      }
    }
  }
}

@for $x from 1 through $totalPieces {
  @keyframes explode#{$x} {
    60% {
      transform: translate3d(0,0,0) scale(1);
    }
    100% {
      transform: translate3d(random(150) * posOrNeg()+px, random(150) * posOrNeg()+px, 0) scale(.1);
    }
  }
  .c:nth-child(#{$x}) {
    animation: explode#{$x} $time+s linear;
  }
}
